{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4db12f72",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pycaret.regression import *\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "import streamlit as st\n",
    "from PIL import Image\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36449ed8",
   "metadata": {},
   "source": [
    "pickle_in = open(r'C:\\Users\\unite\\dat158-ml-course21\\notebooks\\assignment2/final_model_house_prices.pkl', 'rb') \n",
    "classifier = pickle.load(pickle_in) \n",
    "  \n",
    "def welcome(): \n",
    "    return 'welcome all'\n",
    "\n",
    "def prediction(overall_qual, lot_area, garage_yr, garage_cars, bsmt_qual, sale_condition):   \n",
    "   \n",
    "    prediction = classifier.predict( \n",
    "        [[overall_qual, lot_area, garage_yr, garage_cars, bsmt_qual, sale_condition]]) \n",
    "    print(prediction) \n",
    "    return prediction \n",
    "\n",
    "def main(): \n",
    "    st.title(\"Predicting House Prices in Iowa\") \n",
    "      \n",
    "    html_temp = \"\"\" \n",
    "    <div style =\"background-color:green;padding:13px\"> \n",
    "    <h1 style =\"color:black;text-align:center;\">Iowatch</h1> \n",
    "    </div> \n",
    "    \"\"\"\n",
    "      \n",
    "    # this line allows us to display the front end aspects we have  \n",
    "    # defined in the above code \n",
    "    st.markdown(html_temp, unsafe_allow_html = True) \n",
    "      \n",
    "    # the following lines create text boxes in which the user can enter  \n",
    "    # the data required to make the prediction \n",
    "    overall_qual = st.slider('Overall Qual', min_value = 0, max_value = 10, key = '1')\n",
    "    bsmt_qual = st.slider('Basement Quality', min_value = 0, max_value = 10, key = '2')\n",
    "    sale_condition = st.slider('Sale Quality', min_value = 0, max_value = 10, key = '3')\n",
    "    lot_area = st.text_input(\"Lot Area\", \"\") \n",
    "    garage_yr = st.text_input(\"Year Built\", \"\")\n",
    "    garage_cars = st.selectbox('Number of Garages', options = ['1','2','3','4'])\n",
    "    result = \"\" \n",
    "      \n",
    "    # the below line ensures that when the button called 'Predict' is clicked,  \n",
    "    # the prediction function defined above is called to make the prediction  \n",
    "    # and store it in the variable result \n",
    "    if st.button(\"Predict\"): \n",
    "        result = prediction(overall_qual, lot_area, garage_yr, garage_cars, bsmt_qual, sale_condition) \n",
    "    st.success('The predicted house price is {}'.format(result)) \n",
    "     \n",
    "if __name__=='__main__': \n",
    "    main() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2d2372d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-11-12 10:31:25.928 INFO    logs: Initializing load_model()\n",
      "2021-11-12 10:31:25.930 INFO    logs: load_model(model_name=C:\\Users\\unite\\dat158-ml-course21\\notebooks\\assignment2/final_model_house_prices, platform=None, authentication=None, verbose=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformation Pipeline and Model Successfully Loaded\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-11-12 10:31:27.476 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\unite\\anaconda3\\envs\\dat158\\lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "import asyncio\n",
    "import nest_asyncio\n",
    "#nest_asyncio.apply()\n",
    "\n",
    "\n",
    "\n",
    "class StreamlitApp:\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.model = load_model('model/final_model_house_prices') \n",
    "        self.save_fn = 'path.csv'     \n",
    "        \n",
    "    def predict(self, input_data): \n",
    "        return predict_model(self.model, data=input_data)\n",
    "    \n",
    "    def store_prediction(self, output_df): \n",
    "        if os.path.exists(self.save_fn):\n",
    "            save_df = pd.read_csv(self.save_fn)\n",
    "            save_df = save_df.append(output_df, ignore_index=True)\n",
    "            save_df.to_csv(self.save_fn, index=False)\n",
    "            \n",
    "        else: \n",
    "            output_df.to_csv(self.save_fn, index=False)  \n",
    "            \n",
    "    \n",
    "    def run(self):\n",
    "        image = Image.open('assets/hus.jpg')\n",
    "        st.image(image, use_column_width=False)\n",
    "    \n",
    "    \n",
    "        add_selectbox = st.sidebar.selectbox('How would you like to predict?', ('Online', 'Batch'))  \n",
    "        st.sidebar.info('This app is created to predict houseprices' )\n",
    "        st.sidebar.success('DAT158')\n",
    "        st.title('Housing Prices')\n",
    "        \n",
    "       \n",
    "        if add_selectbox == 'Online':\n",
    "            OverallQual = st.number_input('OverallQual', min_value=1, max_value=10, value=5)\n",
    "            MSZoning = st.selectbox('MSZoning', ['A', 'C', 'FV', 'I', 'RH', 'RL', 'RP','RM'])\n",
    "            GrLivArea = st.number_input('GrLivArea', min_value=300, max_value=6000, value=1500)\n",
    "            OverallCond = st.number_input('OverallCond', min_value=1, max_value=9, value=5)           \n",
    "            GarageType = st.selectbox('GarageType', ['2Types', 'Attchd', 'Basment', 'BuiltIn', 'CarPort', 'Detchd', 'NA'])\n",
    "            LandSlope = st.selectbox('LandSlope', ['Gtl', 'Mod', 'Sev'])\n",
    "            FullBath = st.number_input('FullBath', min_value=0, max_value=5, value=0) \n",
    "            Neighborhood = st.selectbox('Neighborhood', ['Blmngtn', 'Blueste', 'BrDale', 'BrkSide', 'ClearCr', \n",
    "                                                         'CollgCr', 'Crawfor', 'Edwards', 'Gilbert', 'IDOTRR', \n",
    "                                                         'MeadowV', 'Mitchel', 'Names','NoRidge', 'NPkVill', \n",
    "                                                         'NridgHt', 'NWAmes', 'OldTown','SWISU', 'Sawyer', \n",
    "                                                         'SawyerW', 'Somerst', 'StoneBr', 'Timber', 'Veenker', 'Up', 'Down'])\n",
    "            Functional = st.selectbox('Functional', ['Typ', 'Min1', 'Min2', 'Mod', 'Maj1', 'Maj2', 'Sev', 'Sal'])\n",
    "            GarageCars =st.number_input('GarageCars', min_value=0.0, max_value=10.0, value=1.0)\n",
    "            GarageArea = st.number_input('GarageArea', min_value=0.0, max_value=2000.0, value=1000.0)\n",
    "            TotRmsAbvGrd = st.number_input('TotRmsAbvGrd', min_value=1.0, max_value=30.0, value=6.0)\n",
    "            \n",
    "            \n",
    "            output=''\n",
    "            input_dict = {'OverallQual':OverallQual, 'MSZoning':MSZoning, 'GrLivArea':GrLivArea, 'OverallCond':OverallCond, \n",
    "                          'GarageType':GarageType, 'LandSlope':LandSlope, 'FullBath':FullBath, 'Neighborhood':Neighborhood, \n",
    "                          'Functional':Functional, 'MSSubClass':0, 'LotFrontage':0, 'LotArea':0, 'Street':\"Null\",'Alley':\"Null\",\n",
    "                          'LotShape':\"Null\",'LandContour':\"Null\",'Utilities':\"Null\",'LotConfig':\"Null\",'Condition1': \"Null\",\n",
    "                          'Condition2': \"Null\",'BldgType':\"Null\",'HouseStyle':\"Null\",'YearBuilt':0,'YearRemodAdd':0,'RoofStyle':\"Null\",\n",
    "                          'RoofMatl':\"Null\",'Exterior1st':\"Null\",'Exterior2nd':\"Null\",'MasVnrType':\"Null\",'MasVnrArea':0,'ExterQual':\"Null\",\n",
    "                          'ExterCond':\"Null\",'Foundation':\"Null\",'BsmtQual':\"Null\",'BsmtCond':\"Null\",'BsmtExposure':\"Null\",'BsmtFinType1':\"Null\",\n",
    "                          'BsmtFinSF1':0,'BsmtFinType2':\"Null\",'BsmtFinSF2':0,'BsmtUnfSF':0,'TotalBsmtSF':0,'Heating':\"Null\",'HeatingQC':\"Null\", \n",
    "                          'CentralAir':\"Null\",'Electrical':\"Null\",'1stFlrSF':0, '2ndFlrSF':0,'LowQualFinSF':0,'BsmtFullBath':0,'BsmtHalfBath':0,\n",
    "                          'HalfBath':0,'BedroomAbvGr':0,'KitchenAbvGr':0,'KitchenQual':\"Null\",'TotRmsAbvGrd':TotRmsAbvGrd, 'Fireplaces':0,'FireplaceQu':\"Null\",\n",
    "                          'GarageYrBlt':0, 'GarageFinish':\"Null\",'GarageCars':GarageCars, 'GarageArea':GarageArea, 'GarageQual':\"Null\",'GarageCond':\"Null\",'PavedDrive':\"Null\",                           'WoodDeckSF':0,'OpenPorchSF':0,'EnclosedPorch':0,'3SsnPorch':0,'ScreenPorch':0,'PoolArea':0,'PoolQC':\"Null\",'Fence':\"Null\",\n",
    "                          'MiscFeature':\"Null\",'MiscVal':0, 'MoSold':0, 'YrSold':0, 'SaleType':\"Null\",'SaleCondition':\"Null\"}\n",
    "           \n",
    "            input_df = pd.DataFrame(input_dict, index=[0])\n",
    "        \n",
    "            if st.button('Predict'): \n",
    "                output = self.predict(input_df)\n",
    "                self.store_prediction(output)\n",
    "                \n",
    "               \n",
    "                output = str(output['Label'])\n",
    "                \n",
    "            \n",
    "            st.success('Predicted output: {}'.format(output))\n",
    "            \n",
    "        if add_selectbox == 'Batch': \n",
    "            fn = st.file_uploader(\"Upload csv file for predictions\") #st.file_uploader('Upload csv file for predictions, type=[\"csv\"]')\n",
    "            if fn is not None: \n",
    "                input_df = pd.read_csv(fn)\n",
    "                predictions = self.predict(input_df)\n",
    "                st.write(predictions)\n",
    "            \n",
    "sa = StreamlitApp()\n",
    "sa.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "feb86a10",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
